diff --git a/src/java.base/share/classes/java/util/HashMap.java b/src/java.base/share/classes/java/util/HashMap.java
index 24fcd9516ca..160ddafa7f0 100644
--- a/src/java.base/share/classes/java/util/HashMap.java
+++ b/src/java.base/share/classes/java/util/HashMap.java
@@ -427,6 +427,94 @@ public class HashMap<K,V> extends AbstractMap<K,V>
      */
     final float loadFactor;
 
+    private transient java.util.concurrent.locks.ReentrantReadWriteLock lock;
+    private transient java.util.concurrent.locks.ReentrantReadWriteLock accessingLock;
+    private transient java.util.LinkedList<ConcurrentModificationException> accessing;
+
+    private void initNCME() {
+        try {
+            if (Thread.currentThread().getContextClassLoader() != null) {
+                this.lock = new java.util.concurrent.locks.ReentrantReadWriteLock();
+                this.accessingLock = new java.util.concurrent.locks.ReentrantReadWriteLock();
+                this.accessing = new java.util.LinkedList<>();
+            }
+        } catch (Throwable e) {
+        }
+    }
+
+    private ConcurrentModificationException concurrentModificationExceptionWithAccessing(ConcurrentModificationException e) {
+        if (this.accessingLock != null) {
+            this.accessingLock.readLock().lock();
+            try {
+                this.accessing.forEach(e::addSuppressed);
+            } finally {
+                this.accessingLock.readLock().unlock();
+            }
+        }
+        return e;
+    }
+
+    private Object beforeTryLock(java.util.concurrent.locks.Lock lock, ConcurrentModificationException e) {
+        this.accessingLock.readLock().lock();
+        try {
+            if (!lock.tryLock()) {
+                this.accessing.forEach(e::addSuppressed);
+                throw e;
+            }
+        } finally {
+            this.accessingLock.readLock().unlock();
+        }
+        this.accessingLock.writeLock().lock();
+        try {
+            this.accessing.add(e);
+        } finally {
+            this.accessingLock.writeLock().unlock();
+        }
+        return e;
+    }
+
+    private void afterLock(java.util.concurrent.locks.Lock lock, Object e) {
+        lock.unlock();
+        this.accessingLock.writeLock().lock();
+        try {
+            this.accessing.removeLastOccurrence(e);
+        } finally {
+            this.accessingLock.writeLock().unlock();
+        }
+    }
+
+    private Object beforeRead() {
+        if (this.lock == null) {
+            return null;
+        }
+        ConcurrentModificationException e = new ConcurrentModificationException();
+        this.beforeTryLock(this.lock.readLock(), e);
+        return e;
+    }
+
+    private void afterRead(Object e) {
+        if (this.lock == null) {
+            return;
+        }
+        this.afterLock(this.lock.readLock(), e);
+    }
+
+    private Object beforeWrite() {
+        if (this.lock == null) {
+            return null;
+        }
+        ConcurrentModificationException e = new ConcurrentModificationException();
+        this.beforeTryLock(this.lock.writeLock(), e);
+        return e;
+    }
+
+    private void afterWrite(Object e) {
+        if (this.lock == null) {
+            return;
+        }
+        this.afterLock(this.lock.writeLock(), e);
+    }
+
     /* ---------------- Public operations -------------- */
 
     /**
@@ -449,6 +537,7 @@ public class HashMap<K,V> extends AbstractMap<K,V>
                                                loadFactor);
         this.loadFactor = loadFactor;
         this.threshold = tableSizeFor(initialCapacity);
+this.initNCME();
     }
 
     /**
@@ -468,6 +557,7 @@ public class HashMap<K,V> extends AbstractMap<K,V>
      */
     public HashMap() {
         this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted
+this.initNCME();
     }
 
     /**
@@ -482,6 +572,7 @@ public class HashMap<K,V> extends AbstractMap<K,V>
     public HashMap(Map<? extends K, ? extends V> m) {
         this.loadFactor = DEFAULT_LOAD_FACTOR;
         putMapEntries(m, false);
+this.initNCME();
     }
 
     /**
@@ -563,6 +654,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
      * @return the node, or null if none
      */
     final Node<K,V> getNode(Object key) {
+Object locked = this.beforeRead();
+try {
+
         Node<K,V>[] tab; Node<K,V> first, e; int n, hash; K k;
         if ((tab = table) != null && (n = tab.length) > 0 &&
             (first = tab[(n - 1) & (hash = hash(key))]) != null) {
@@ -580,6 +674,10 @@ public class HashMap<K,V> extends AbstractMap<K,V>
             }
         }
         return null;
+
+} finally {
+    this.afterRead(locked);
+}
     }
 
     /**
@@ -622,6 +720,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
      */
     final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                    boolean evict) {
+Object locked = this.beforeWrite();
+try {
+
         Node<K,V>[] tab; Node<K,V> p; int n, i;
         if ((tab = table) == null || (n = tab.length) == 0)
             n = (tab = resize()).length;
@@ -661,6 +762,10 @@ public class HashMap<K,V> extends AbstractMap<K,V>
             resize();
         afterNodeInsertion(evict);
         return null;
+
+} finally {
+    this.afterWrite(locked);
+}
     }
 
     /**
@@ -810,6 +915,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
      */
     final Node<K,V> removeNode(int hash, Object key, Object value,
                                boolean matchValue, boolean movable) {
+Object locked = this.beforeWrite();
+try {
+
         Node<K,V>[] tab; Node<K,V> p; int n, index;
         if ((tab = table) != null && (n = tab.length) > 0 &&
             (p = tab[index = (n - 1) & hash]) != null) {
@@ -847,6 +955,10 @@ public class HashMap<K,V> extends AbstractMap<K,V>
             }
         }
         return null;
+
+} finally {
+    this.afterWrite(locked);
+}
     }
 
     /**
@@ -854,6 +966,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
      * The map will be empty after this call returns.
      */
     public void clear() {
+Object locked = this.beforeWrite();
+try {
+
         Node<K,V>[] tab;
         modCount++;
         if ((tab = table) != null && size > 0) {
@@ -861,6 +976,10 @@ public class HashMap<K,V> extends AbstractMap<K,V>
             for (int i = 0; i < tab.length; ++i)
                 tab[i] = null;
         }
+
+} finally {
+    this.afterWrite(locked);
+}
     }
 
     /**
@@ -872,6 +991,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
      *         specified value
      */
     public boolean containsValue(Object value) {
+Object locked = this.beforeRead();
+try {
+
         Node<K,V>[] tab; V v;
         if ((tab = table) != null && size > 0) {
             for (Node<K,V> e : tab) {
@@ -883,6 +1005,10 @@ public class HashMap<K,V> extends AbstractMap<K,V>
             }
         }
         return false;
+
+} finally {
+    this.afterRead(locked);
+}
     }
 
     /**
@@ -998,6 +1124,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
         }
 
         public final void forEach(Consumer<? super K> action) {
+Object locked = HashMap.this.beforeRead();
+try {
+
             Node<K,V>[] tab;
             if (action == null)
                 throw new NullPointerException();
@@ -1008,8 +1137,12 @@ public class HashMap<K,V> extends AbstractMap<K,V>
                         action.accept(e.key);
                 }
                 if (modCount != mc)
-                    throw new ConcurrentModificationException();
+                    throw concurrentModificationExceptionWithAccessing(new ConcurrentModificationException());
             }
+
+} finally {
+    HashMap.this.afterRead(locked);
+}
         }
     }
 
@@ -1055,6 +1188,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
         }
 
         public final void forEach(Consumer<? super V> action) {
+Object locked = HashMap.this.beforeRead();
+try {
+
             Node<K,V>[] tab;
             if (action == null)
                 throw new NullPointerException();
@@ -1065,8 +1201,12 @@ public class HashMap<K,V> extends AbstractMap<K,V>
                         action.accept(e.value);
                 }
                 if (modCount != mc)
-                    throw new ConcurrentModificationException();
+                    throw concurrentModificationExceptionWithAccessing(new ConcurrentModificationException());
             }
+
+} finally {
+    HashMap.this.afterRead(locked);
+}
         }
     }
 
@@ -1116,6 +1256,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
             return new EntrySpliterator<>(HashMap.this, 0, -1, 0, 0);
         }
         public final void forEach(Consumer<? super Map.Entry<K,V>> action) {
+Object locked = HashMap.this.beforeRead();
+try {
+
             Node<K,V>[] tab;
             if (action == null)
                 throw new NullPointerException();
@@ -1126,8 +1269,12 @@ public class HashMap<K,V> extends AbstractMap<K,V>
                         action.accept(e);
                 }
                 if (modCount != mc)
-                    throw new ConcurrentModificationException();
+                    throw concurrentModificationExceptionWithAccessing(new ConcurrentModificationException());
             }
+
+} finally {
+    HashMap.this.afterRead(locked);
+}
         }
     }
 
@@ -1151,6 +1298,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
 
     @Override
     public boolean replace(K key, V oldValue, V newValue) {
+Object locked = this.beforeWrite();
+try {
+
         Node<K,V> e; V v;
         if ((e = getNode(key)) != null &&
             ((v = e.value) == oldValue || (v != null && v.equals(oldValue)))) {
@@ -1159,10 +1309,17 @@ public class HashMap<K,V> extends AbstractMap<K,V>
             return true;
         }
         return false;
+
+} finally {
+    this.afterWrite(locked);
+}
     }
 
     @Override
     public V replace(K key, V value) {
+Object locked = this.beforeWrite();
+try {
+
         Node<K,V> e;
         if ((e = getNode(key)) != null) {
             V oldValue = e.value;
@@ -1171,6 +1328,10 @@ public class HashMap<K,V> extends AbstractMap<K,V>
             return oldValue;
         }
         return null;
+
+} finally {
+    this.afterWrite(locked);
+}
     }
 
     /**
@@ -1186,6 +1347,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
     @Override
     public V computeIfAbsent(K key,
                              Function<? super K, ? extends V> mappingFunction) {
+Object locked = this.beforeWrite();
+try {
+
         if (mappingFunction == null)
             throw new NullPointerException();
         int hash = hash(key);
@@ -1218,7 +1382,7 @@ public class HashMap<K,V> extends AbstractMap<K,V>
         }
         int mc = modCount;
         V v = mappingFunction.apply(key);
-        if (mc != modCount) { throw new ConcurrentModificationException(); }
+        if (mc != modCount) { throw concurrentModificationExceptionWithAccessing(new ConcurrentModificationException()); }
         if (v == null) {
             return null;
         } else if (old != null) {
@@ -1237,6 +1401,10 @@ public class HashMap<K,V> extends AbstractMap<K,V>
         ++size;
         afterNodeInsertion(true);
         return v;
+
+} finally {
+    this.afterWrite(locked);
+}
     }
 
     /**
@@ -1252,6 +1420,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
     @Override
     public V computeIfPresent(K key,
                               BiFunction<? super K, ? super V, ? extends V> remappingFunction) {
+Object locked = this.beforeWrite();
+try {
+
         if (remappingFunction == null)
             throw new NullPointerException();
         Node<K,V> e; V oldValue;
@@ -1259,7 +1430,7 @@ public class HashMap<K,V> extends AbstractMap<K,V>
             (oldValue = e.value) != null) {
             int mc = modCount;
             V v = remappingFunction.apply(key, oldValue);
-            if (mc != modCount) { throw new ConcurrentModificationException(); }
+            if (mc != modCount) { throw concurrentModificationExceptionWithAccessing(new ConcurrentModificationException()); }
             if (v != null) {
                 e.value = v;
                 afterNodeAccess(e);
@@ -1271,6 +1442,10 @@ public class HashMap<K,V> extends AbstractMap<K,V>
             }
         }
         return null;
+
+} finally {
+    this.afterWrite(locked);
+}
     }
 
     /**
@@ -1286,6 +1461,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
     @Override
     public V compute(K key,
                      BiFunction<? super K, ? super V, ? extends V> remappingFunction) {
+Object locked = this.beforeWrite();
+try {
+
         if (remappingFunction == null)
             throw new NullPointerException();
         int hash = hash(key);
@@ -1314,7 +1492,7 @@ public class HashMap<K,V> extends AbstractMap<K,V>
         V oldValue = (old == null) ? null : old.value;
         int mc = modCount;
         V v = remappingFunction.apply(key, oldValue);
-        if (mc != modCount) { throw new ConcurrentModificationException(); }
+        if (mc != modCount) { throw concurrentModificationExceptionWithAccessing(new ConcurrentModificationException()); }
         if (old != null) {
             if (v != null) {
                 old.value = v;
@@ -1336,6 +1514,10 @@ public class HashMap<K,V> extends AbstractMap<K,V>
             afterNodeInsertion(true);
         }
         return v;
+
+} finally {
+    this.afterWrite(locked);
+}
     }
 
     /**
@@ -1351,6 +1533,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
     @Override
     public V merge(K key, V value,
                    BiFunction<? super V, ? super V, ? extends V> remappingFunction) {
+Object locked = this.beforeWrite();
+try {
+
         if (value == null || remappingFunction == null)
             throw new NullPointerException();
         int hash = hash(key);
@@ -1382,7 +1567,7 @@ public class HashMap<K,V> extends AbstractMap<K,V>
                 int mc = modCount;
                 v = remappingFunction.apply(old.value, value);
                 if (mc != modCount) {
-                    throw new ConcurrentModificationException();
+                    throw concurrentModificationExceptionWithAccessing(new ConcurrentModificationException());
                 }
             } else {
                 v = value;
@@ -1407,10 +1592,17 @@ public class HashMap<K,V> extends AbstractMap<K,V>
             afterNodeInsertion(true);
             return value;
         }
+
+} finally {
+    this.afterWrite(locked);
+}
     }
 
     @Override
     public void forEach(BiConsumer<? super K, ? super V> action) {
+Object locked = this.beforeRead();
+try {
+
         Node<K,V>[] tab;
         if (action == null)
             throw new NullPointerException();
@@ -1421,12 +1613,19 @@ public class HashMap<K,V> extends AbstractMap<K,V>
                     action.accept(e.key, e.value);
             }
             if (modCount != mc)
-                throw new ConcurrentModificationException();
+                throw concurrentModificationExceptionWithAccessing(new ConcurrentModificationException());
         }
+
+} finally {
+    this.afterRead(locked);
+}
     }
 
     @Override
     public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {
+Object locked = this.beforeWrite();
+try {
+
         Node<K,V>[] tab;
         if (function == null)
             throw new NullPointerException();
@@ -1438,8 +1637,12 @@ public class HashMap<K,V> extends AbstractMap<K,V>
                 }
             }
             if (modCount != mc)
-                throw new ConcurrentModificationException();
+                throw concurrentModificationExceptionWithAccessing(new ConcurrentModificationException());
         }
+
+} finally {
+    this.afterWrite(locked);
+}
     }
 
     /* ------------------------------------------------------------ */
@@ -1454,6 +1657,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
     @SuppressWarnings("unchecked")
     @Override
     public Object clone() {
+Object locked = this.beforeRead();
+try {
+
         HashMap<K,V> result;
         try {
             result = (HashMap<K,V>)super.clone();
@@ -1461,9 +1667,14 @@ public class HashMap<K,V> extends AbstractMap<K,V>
             // this shouldn't happen, since we are Cloneable
             throw new InternalError(e);
         }
+result.initNCME();
         result.reinitialize();
         result.putMapEntries(this, false);
         return result;
+
+} finally {
+    this.afterRead(locked);
+}
     }
 
     // These methods are also used when serializing HashSets
@@ -1489,12 +1700,19 @@ public class HashMap<K,V> extends AbstractMap<K,V>
     @java.io.Serial
     private void writeObject(java.io.ObjectOutputStream s)
         throws IOException {
+Object locked = this.beforeRead();
+try {
+
         int buckets = capacity();
         // Write out the threshold, loadfactor, and any hidden stuff
         s.defaultWriteObject();
         s.writeInt(buckets);
         s.writeInt(size);
         internalWriteEntries(s);
+
+} finally {
+    this.afterRead(locked);
+}
     }
 
     /**
@@ -1508,6 +1726,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
     private void readObject(ObjectInputStream s)
         throws IOException, ClassNotFoundException {
 
+Object locked = this.beforeWrite();
+try {
+
         ObjectInputStream.GetField fields = s.readFields();
 
         // Read loadFactor (ignore threshold)
@@ -1553,6 +1774,10 @@ public class HashMap<K,V> extends AbstractMap<K,V>
                 putVal(hash(key), key, value, false, false);
             }
         }
+
+} finally {
+    this.afterWrite(locked);
+}
     }
 
     // Support for resetting final field during deserializing
@@ -1594,7 +1819,7 @@ public class HashMap<K,V> extends AbstractMap<K,V>
             Node<K,V>[] t;
             Node<K,V> e = next;
             if (modCount != expectedModCount)
-                throw new ConcurrentModificationException();
+                throw concurrentModificationExceptionWithAccessing(new ConcurrentModificationException());
             if (e == null)
                 throw new NoSuchElementException();
             if ((next = (current = e).next) == null && (t = table) != null) {
@@ -1608,7 +1833,7 @@ public class HashMap<K,V> extends AbstractMap<K,V>
             if (p == null)
                 throw new IllegalStateException();
             if (modCount != expectedModCount)
-                throw new ConcurrentModificationException();
+                throw concurrentModificationExceptionWithAccessing(new ConcurrentModificationException());
             current = null;
             removeNode(p.hash, p.key, null, false, false);
             expectedModCount = modCount;
@@ -1685,6 +1910,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
         }
 
         public void forEachRemaining(Consumer<? super K> action) {
+Object locked = map.beforeRead();
+try {
+
             int i, hi, mc;
             if (action == null)
                 throw new NullPointerException();
@@ -1709,11 +1937,18 @@ public class HashMap<K,V> extends AbstractMap<K,V>
                     }
                 } while (p != null || i < hi);
                 if (m.modCount != mc)
-                    throw new ConcurrentModificationException();
+                    throw map.concurrentModificationExceptionWithAccessing(new ConcurrentModificationException());
             }
+
+} finally {
+    map.afterRead(locked);
+}
         }
 
         public boolean tryAdvance(Consumer<? super K> action) {
+Object locked = map.beforeRead();
+try {
+
             int hi;
             if (action == null)
                 throw new NullPointerException();
@@ -1727,12 +1962,16 @@ public class HashMap<K,V> extends AbstractMap<K,V>
                         current = current.next;
                         action.accept(k);
                         if (map.modCount != expectedModCount)
-                            throw new ConcurrentModificationException();
+                            throw map.concurrentModificationExceptionWithAccessing(new ConcurrentModificationException());
                         return true;
                     }
                 }
             }
             return false;
+
+} finally {
+    map.afterRead(locked);
+}
         }
 
         public int characteristics() {
@@ -1757,6 +1996,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
         }
 
         public void forEachRemaining(Consumer<? super V> action) {
+Object locked = map.beforeRead();
+try {
+
             int i, hi, mc;
             if (action == null)
                 throw new NullPointerException();
@@ -1781,11 +2023,18 @@ public class HashMap<K,V> extends AbstractMap<K,V>
                     }
                 } while (p != null || i < hi);
                 if (m.modCount != mc)
-                    throw new ConcurrentModificationException();
+                    throw map.concurrentModificationExceptionWithAccessing(new ConcurrentModificationException());
             }
+
+} finally {
+    map.afterRead(locked);
+}
         }
 
         public boolean tryAdvance(Consumer<? super V> action) {
+Object locked = map.beforeRead();
+try {
+
             int hi;
             if (action == null)
                 throw new NullPointerException();
@@ -1799,12 +2048,16 @@ public class HashMap<K,V> extends AbstractMap<K,V>
                         current = current.next;
                         action.accept(v);
                         if (map.modCount != expectedModCount)
-                            throw new ConcurrentModificationException();
+                            throw map.concurrentModificationExceptionWithAccessing(new ConcurrentModificationException());
                         return true;
                     }
                 }
             }
             return false;
+
+} finally {
+    map.afterRead(locked);
+}
         }
 
         public int characteristics() {
@@ -1828,6 +2081,9 @@ public class HashMap<K,V> extends AbstractMap<K,V>
         }
 
         public void forEachRemaining(Consumer<? super Map.Entry<K,V>> action) {
+Object locked = map.beforeRead();
+try {
+
             int i, hi, mc;
             if (action == null)
                 throw new NullPointerException();
@@ -1852,11 +2108,18 @@ public class HashMap<K,V> extends AbstractMap<K,V>
                     }
                 } while (p != null || i < hi);
                 if (m.modCount != mc)
-                    throw new ConcurrentModificationException();
+                    throw map.concurrentModificationExceptionWithAccessing(new ConcurrentModificationException());
             }
+
+} finally {
+    map.afterRead(locked);
+}
         }
 
         public boolean tryAdvance(Consumer<? super Map.Entry<K,V>> action) {
+Object locked = map.beforeRead();
+try {
+
             int hi;
             if (action == null)
                 throw new NullPointerException();
@@ -1870,12 +2133,16 @@ public class HashMap<K,V> extends AbstractMap<K,V>
                         current = current.next;
                         action.accept(e);
                         if (map.modCount != expectedModCount)
-                            throw new ConcurrentModificationException();
+                            throw map.concurrentModificationExceptionWithAccessing(new ConcurrentModificationException());
                         return true;
                     }
                 }
             }
             return false;
+
+} finally {
+    map.afterRead(locked);
+}
         }
 
         public int characteristics() {
